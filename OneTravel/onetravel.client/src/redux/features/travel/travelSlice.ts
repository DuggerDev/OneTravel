import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import { RootState, } from '../../store';
import { generateTrips } from './travelAPI';
import ITripModel from '../../../models/ITripModel';

export interface TravelState {
  status: 'idle' | 'loading' | 'failed';
  trips: ITripModel[];
}

const initialState: TravelState = {
    status: 'idle',
    trips: [],
};

interface TripParams {
  originCity: string;
  destinationCity: string;
  startDate: Date;
}

export const fetchTripsAsync = createAsyncThunk<ITripModel[], TripParams>(
  'travel/fetchTrips',
  async ({ originCity, destinationCity, startDate }) => {
    const response = await generateTrips(originCity, destinationCity, startDate);
    console.log(response.data)
    return response.data;
  }
);

export const travelSlice = createSlice({
  name: 'travel',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    // Handle the pending state (when the async operation is in progress)
    .addCase(fetchTripsAsync.pending, (state) => {
      state.status = 'loading';
    })
    // Handle the fulfilled state (when the async operation is successful)
    .addCase(fetchTripsAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.trips = action.payload; // Store the fetched trips in the state
    })
    // Handle the rejected state (when the async operation fails)
    .addCase(fetchTripsAsync.rejected, (state) => {
      state.status = 'failed';
    });
  },
});



export const selectTrips = (state: RootState) => state.travel.trips; 


export default travelSlice.reducer;