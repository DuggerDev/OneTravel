import {createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, } from '../../store';
import { fetchTrips } from './travelAPI';
import ITripModel from '../../../models/ITripModel';

export interface TravelState {
  startCity: string;
  endCity: string;
  leaveDate: Date;
  status: 'idle' | 'loading' | 'failed';
  trips: ITripModel[];
}

const initialState: TravelState = {
    startCity: "",
    endCity: "",
    leaveDate: new Date(),
    status: 'idle',
    trips: [],
};

export const fetchTripsAsync = createAsyncThunk(
  'travel/fetchCount',
  async () => {
    const response = await fetchTrips();
    console.log("AHHH")
    return response.data;
  }
);

export const travelSlice = createSlice({
  name: 'travel',
  initialState,
  reducers: {
    updateStartCity: (state, action: PayloadAction<string>) => {
      state.startCity = action.payload;
    },
    updateEndCity: (state, action: PayloadAction<string>) => {
        state.endCity = action.payload;
      },
    updateLeaveDate: (state, action: PayloadAction<Date>) => {
    state.leaveDate = action.payload;
    },
    resetSearch: (state) => {
        state.leaveDate = new Date();
        state.startCity = "";
        state.endCity = "";
        },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    // Handle the pending state (when the async operation is in progress)
    .addCase(fetchTripsAsync.pending, (state) => {
      state.status = 'loading';
    })
    // Handle the fulfilled state (when the async operation is successful)
    .addCase(fetchTripsAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.trips = action.payload; // Store the fetched trips in the state
    })
    // Handle the rejected state (when the async operation fails)
    .addCase(fetchTripsAsync.rejected, (state) => {
      state.status = 'failed';
    });
  },
});

export const { updateStartCity, updateEndCity, updateLeaveDate, resetSearch} = travelSlice.actions;


export const selectStartCity = (state: RootState) => state.travel.startCity;
export const selectEndCity = (state: RootState) => state.travel.endCity;
export const selectLeaveDate = (state: RootState) => state.travel.leaveDate;
export const selectTrips = (state: RootState) => state.travel.trips; // Selector to get trips


export default travelSlice.reducer;